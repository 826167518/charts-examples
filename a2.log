apiVersion: apps/v1
kind: StatefulSet
metadata:
  creationTimestamp: "2020-03-01T11:51:54Z"
  generation: 1
  labels:
    app: tsf-mysql
    chart: tsf-mysql-6.8.0
    component: master
    heritage: Tiller
    release: tsf-mysql
  name: tsf-mysql-master
  namespace: default
  resourceVersion: "2054861"
  selfLink: /apis/apps/v1/namespaces/default/statefulsets/tsf-mysql-master
  uid: 0b9d9887-5bb3-11ea-9738-5254001c5ecf
spec:
  podManagementPolicy: OrderedReady
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app: tsf-mysql
      component: master
      release: tsf-mysql
  serviceName: tsf-mysql-master
  template:
    metadata:
      creationTimestamp: null
      labels:
        app: tsf-mysql
        chart: tsf-mysql-6.8.0
        component: master
        heritage: Tiller
        release: tsf-mysql
    spec:
      containers:
      - env:
        - name: BITNAMI_DEBUG
          value: "false"
        - name: MYSQL_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              key: mysql-root-password
              name: tsf-mysql
        - name: MYSQL_DATABASE
          value: my_database
        - name: MYSQL_REPLICATION_MODE
          value: master
        - name: MYSQL_REPLICATION_USER
          value: replicator
        - name: MYSQL_REPLICATION_PASSWORD
          valueFrom:
            secretKeyRef:
              key: mysql-replication-password
              name: tsf-mysql
        image: index.alauda.cn/alaudaorg/mysql:5.7.29-add.6
        imagePullPolicy: IfNotPresent
        livenessProbe:
          exec:
            command:
            - sh
            - -c
            - |
              password_aux="${MYSQL_ROOT_PASSWORD:-}"
              if [ -f "${MYSQL_ROOT_PASSWORD_FILE:-}" ]; then
                  password_aux=$(cat $MYSQL_ROOT_PASSWORD_FILE)
              fi
              mysqladmin status -uroot -p$password_aux
          failureThreshold: 3
          initialDelaySeconds: 120
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 1
        name: mysql
        ports:
        - containerPort: 3306
          name: mysql
          protocol: TCP
        readinessProbe:
          exec:
            command:
            - sh
            - -c
            - |
              password_aux="${MYSQL_ROOT_PASSWORD:-}"
              if [ -f "${MYSQL_ROOT_PASSWORD_FILE:-}" ]; then
                  password_aux=$(cat $MYSQL_ROOT_PASSWORD_FILE)
              fi
              mysqladmin status -uroot -p$password_aux
          failureThreshold: 3
          initialDelaySeconds: 30
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 1
        resources: {}
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        volumeMounts:
        - mountPath: /bitnami/mysql
          name: data-tsf-mysql-master-0
        - mountPath: /opt/bitnami/mysql/conf/my.cnf
          name: config
          subPath: my.cnf
      - command:
        - /bin/sh
        - -c
        - |
          password_aux="${MYSQL_ROOT_PASSWORD:-}"
          if [ -f "${MYSQL_ROOT_PASSWORD_FILE:-}" ]; then
              password_aux=$(cat $MYSQL_ROOT_PASSWORD_FILE)
          fi
          DATA_SOURCE_NAME="root:${password_aux}@(localhost:3306)/" /bin/mysqld_exporter
        env:
        - name: MYSQL_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              key: mysql-root-password
              name: tsf-mysql
        image: docker.io/bitnami/mysqld-exporter:0.12.1-debian-10-r0
        imagePullPolicy: IfNotPresent
        livenessProbe:
          failureThreshold: 3
          httpGet:
            path: /metrics
            port: metrics
            scheme: HTTP
          initialDelaySeconds: 15
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 5
        name: metrics
        ports:
        - containerPort: 9104
          name: metrics
          protocol: TCP
        readinessProbe:
          failureThreshold: 3
          httpGet:
            path: /metrics
            port: metrics
            scheme: HTTP
          initialDelaySeconds: 5
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 1
        resources: {}
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
      dnsPolicy: ClusterFirst
      initContainers:
      - command:
        - /bin/bash
        - -ec
        - |
          chown -R 1001:1001 /bitnami/mysql
        image: docker.io/bitnami/minideb:buster
        imagePullPolicy: Always
        name: volume-permissions
        resources: {}
        securityContext:
          runAsUser: 0
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        volumeMounts:
        - mountPath: /bitnami/mysql
          name: data
      nodeSelector:
        tsf.product.alauda.io/tsf-node1: enabled
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext:
        fsGroup: 1001
        runAsUser: 1001
      terminationGracePeriodSeconds: 30
      volumes:
      - configMap:
          defaultMode: 420
          name: tsf-mysql-master
        name: config
      - name: data-tsf-mysql-master-0
        persistentVolumeClaim:
          claimName: data-tsf-mysql-master-0
  updateStrategy:
    type: RollingUpdate
status:
  replicas: 0
